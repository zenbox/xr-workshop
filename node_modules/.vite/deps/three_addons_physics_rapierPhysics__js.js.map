{
  "version": 3,
  "sources": ["../../three/examples/jsm/physics/RapierPhysics.js"],
  "sourcesContent": ["async function RapierPhysics() {\n\n\tconst RAPIER = await import( 'https://cdn.skypack.dev/@dimforge/rapier3d-compat@0.11.2' );\n\t\n\tawait RAPIER.init();\n\n\tconst frameRate = 60;\n\n\t// Docs: https://rapier.rs/docs/api/javascript/JavaScript3D/\t\n\n\tconst gravity = { x: 0.0, y: - 9.81, z: 0.0 };\n\tconst world = new RAPIER.World( gravity );\n\n\tfunction getCollider( geometry ) {\n\n\t\tconst parameters = geometry.parameters;\n\n\t\t// TODO change type to is*\n\n\t\tif ( geometry.type === 'BoxGeometry' ) {\n\n\t\t\tconst sx = parameters.width !== undefined ? parameters.width / 2 : 0.5;\n\t\t\tconst sy = parameters.height !== undefined ? parameters.height / 2 : 0.5;\n\t\t\tconst sz = parameters.depth !== undefined ? parameters.depth / 2 : 0.5;\n\n\t\t\treturn RAPIER.ColliderDesc.cuboid( sx, sy, sz );\n\n\t\t} else if ( geometry.type === 'SphereGeometry' || geometry.type === 'IcosahedronGeometry' ) {\n\n\t\t\tconst radius = parameters.radius !== undefined ? parameters.radius : 1;\n\n\t\t\treturn RAPIER.ColliderDesc.ball( radius );\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\tconst meshes = [];\n\tconst meshMap = new WeakMap();\n\n\tfunction addMesh( mesh, mass = 0, restitution = 0 ) {\n\n\t\tconst shape = getCollider( mesh.geometry );\n\n\t\tif ( shape !== null ) {\n\n\t\t\tshape.setMass( mass );\n\t\t\tshape.setRestitution( restitution );\n\t\n\t\t\tif ( mesh.isInstancedMesh ) {\n\n\t\t\t\thandleInstancedMesh( mesh, mass, shape );\n\n\t\t\t} else if ( mesh.isMesh ) {\n\n\t\t\t\thandleMesh( mesh, mass, shape );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction handleMesh( mesh, mass, shape ) {\n\n\t\tconst position = mesh.position;\n\t\tconst quaternion = mesh.quaternion;\n\n\t\tconst desc = mass > 0 ? RAPIER.RigidBodyDesc.dynamic() : RAPIER.RigidBodyDesc.fixed();\n\t\tdesc.setTranslation( position.x, position.y, position.z );\n\t\tdesc.setRotation( quaternion );\n\n\t\tconst body = world.createRigidBody( desc );\n\t\tworld.createCollider( shape, body );\n\n\t\tif ( mass > 0 ) {\n\n\t\t\tmeshes.push( mesh );\n\t\t\tmeshMap.set( mesh, body );\n\n\t\t}\n\n\t}\n\n\tfunction handleInstancedMesh( mesh, mass, shape ) {\n\n\t\tconst array = mesh.instanceMatrix.array;\n\n\t\tconst bodies = [];\n\n\t\tfor ( let i = 0; i < mesh.count; i ++ ) {\n\n\t\t\tconst index = i * 16;\n\n\t\t\tconst desc = mass > 0 ? RAPIER.RigidBodyDesc.dynamic() : RAPIER.RigidBodyDesc.fixed();\n\t\t\tdesc.setTranslation( array[ index + 12 ], array[ index + 13 ], array[ index + 14 ] );\n\n\t\t\tconst body = world.createRigidBody( desc );\n\t\t\tworld.createCollider( shape, body );\n\n\t\t\tbodies.push( body );\n\n\t\t}\n\n\t\tif ( mass > 0 ) {\n\n\t\t\tmeshes.push( mesh );\n\t\t\tmeshMap.set( mesh, bodies );\n\n\t\t}\n\n\t}\n\n\tconst vector = { x: 0, y: 0, z: 0 };\n\n\tfunction setMeshPosition( mesh, position, index = 0 ) {\n\n\t\tif ( mesh.isInstancedMesh ) {\n\n\t\t\tconst bodies = meshMap.get( mesh );\n\t\t\tconst body = bodies[ index ];\n\n\t\t\tbody.setAngvel( vector );\n\t\t\tbody.setLinvel( vector );\n\t\t\tbody.setTranslation( position );\n\n\t\t} else if ( mesh.isMesh ) {\n\n\t\t\tconst body = meshMap.get( mesh );\n\n\t\t\tbody.setAngvel( vector );\n\t\t\tbody.setLinvel( vector );\n\t\t\tbody.setTranslation( position );\n\n\t\t}\n\n\t}\n\n\t//\n\n\tlet lastTime = 0;\n\n\tfunction step() {\n\n\t\tconst time = performance.now();\n\n\t\tif ( lastTime > 0 ) {\n\n\t\t\tconst delta = ( time - lastTime ) / 1000;\n\n\t\t\tworld.timestep = delta;\n\t\t\tworld.step();\n\n\t\t\t//\n\n\t\t\tfor ( let i = 0, l = meshes.length; i < l; i ++ ) {\n\n\t\t\t\tconst mesh = meshes[ i ];\n\n\t\t\t\tif ( mesh.isInstancedMesh ) {\n\n\t\t\t\t\tconst array = mesh.instanceMatrix.array;\n\t\t\t\t\tconst bodies = meshMap.get( mesh );\n\n\t\t\t\t\tfor ( let j = 0; j < bodies.length; j ++ ) {\n\n\t\t\t\t\t\tconst body = bodies[ j ];\n\n\t\t\t\t\t\tconst position = body.translation();\n\t\t\t\t\t\tconst quaternion = body.rotation();\n\n\t\t\t\t\t\tcompose( position, quaternion, array, j * 16 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmesh.instanceMatrix.needsUpdate = true;\n\t\t\t\t\tmesh.computeBoundingSphere();\n\n\t\t\t\t} else if ( mesh.isMesh ) {\n\n\t\t\t\t\tconst body = meshMap.get( mesh );\n\n\t\t\t\t\tmesh.position.copy( body.translation() );\n\t\t\t\t\tmesh.quaternion.copy( body.rotation() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tlastTime = time;\n\n\t}\n\n\t// animate\n\n\tsetInterval( step, 1000 / frameRate );\n\n\treturn {\n\t\taddMesh: addMesh,\n\t\tsetMeshPosition: setMeshPosition\n\t};\n\n}\n\nfunction compose( position, quaternion, array, index ) {\n\n\tconst x = quaternion.x, y = quaternion.y, z = quaternion.z, w = quaternion.w;\n\tconst x2 = x + x, y2 = y + y, z2 = z + z;\n\tconst xx = x * x2, xy = x * y2, xz = x * z2;\n\tconst yy = y * y2, yz = y * z2, zz = z * z2;\n\tconst wx = w * x2, wy = w * y2, wz = w * z2;\n\n\tarray[ index + 0 ] = ( 1 - ( yy + zz ) );\n\tarray[ index + 1 ] = ( xy + wz );\n\tarray[ index + 2 ] = ( xz - wy );\n\tarray[ index + 3 ] = 0;\n\n\tarray[ index + 4 ] = ( xy - wz );\n\tarray[ index + 5 ] = ( 1 - ( xx + zz ) );\n\tarray[ index + 6 ] = ( yz + wx );\n\tarray[ index + 7 ] = 0;\n\n\tarray[ index + 8 ] = ( xz + wy );\n\tarray[ index + 9 ] = ( yz - wx );\n\tarray[ index + 10 ] = ( 1 - ( xx + yy ) );\n\tarray[ index + 11 ] = 0;\n\n\tarray[ index + 12 ] = position.x;\n\tarray[ index + 13 ] = position.y;\n\tarray[ index + 14 ] = position.z;\n\tarray[ index + 15 ] = 1;\n\n}\n\nexport { RapierPhysics };\n"],
  "mappings": ";;;AAAA,eAAe,gBAAgB;AAE9B,QAAM,SAAS,MAAM,OAAQ,0DAA2D;AAExF,QAAM,OAAO,KAAK;AAElB,QAAM,YAAY;AAIlB,QAAM,UAAU,EAAE,GAAG,GAAK,GAAG,OAAQ,GAAG,EAAI;AAC5C,QAAM,QAAQ,IAAI,OAAO,MAAO,OAAQ;AAExC,WAAS,YAAa,UAAW;AAEhC,UAAM,aAAa,SAAS;AAI5B,QAAK,SAAS,SAAS,eAAgB;AAEtC,YAAM,KAAK,WAAW,UAAU,SAAY,WAAW,QAAQ,IAAI;AACnE,YAAM,KAAK,WAAW,WAAW,SAAY,WAAW,SAAS,IAAI;AACrE,YAAM,KAAK,WAAW,UAAU,SAAY,WAAW,QAAQ,IAAI;AAEnE,aAAO,OAAO,aAAa,OAAQ,IAAI,IAAI,EAAG;AAAA,IAE/C,WAAY,SAAS,SAAS,oBAAoB,SAAS,SAAS,uBAAwB;AAE3F,YAAM,SAAS,WAAW,WAAW,SAAY,WAAW,SAAS;AAErE,aAAO,OAAO,aAAa,KAAM,MAAO;AAAA,IAEzC;AAEA,WAAO;AAAA,EAER;AAEA,QAAM,SAAS,CAAC;AAChB,QAAM,UAAU,oBAAI,QAAQ;AAE5B,WAAS,QAAS,MAAM,OAAO,GAAG,cAAc,GAAI;AAEnD,UAAM,QAAQ,YAAa,KAAK,QAAS;AAEzC,QAAK,UAAU,MAAO;AAErB,YAAM,QAAS,IAAK;AACpB,YAAM,eAAgB,WAAY;AAElC,UAAK,KAAK,iBAAkB;AAE3B,4BAAqB,MAAM,MAAM,KAAM;AAAA,MAExC,WAAY,KAAK,QAAS;AAEzB,mBAAY,MAAM,MAAM,KAAM;AAAA,MAE/B;AAAA,IAED;AAAA,EAED;AAEA,WAAS,WAAY,MAAM,MAAM,OAAQ;AAExC,UAAM,WAAW,KAAK;AACtB,UAAM,aAAa,KAAK;AAExB,UAAM,OAAO,OAAO,IAAI,OAAO,cAAc,QAAQ,IAAI,OAAO,cAAc,MAAM;AACpF,SAAK,eAAgB,SAAS,GAAG,SAAS,GAAG,SAAS,CAAE;AACxD,SAAK,YAAa,UAAW;AAE7B,UAAM,OAAO,MAAM,gBAAiB,IAAK;AACzC,UAAM,eAAgB,OAAO,IAAK;AAElC,QAAK,OAAO,GAAI;AAEf,aAAO,KAAM,IAAK;AAClB,cAAQ,IAAK,MAAM,IAAK;AAAA,IAEzB;AAAA,EAED;AAEA,WAAS,oBAAqB,MAAM,MAAM,OAAQ;AAEjD,UAAM,QAAQ,KAAK,eAAe;AAElC,UAAM,SAAS,CAAC;AAEhB,aAAU,IAAI,GAAG,IAAI,KAAK,OAAO,KAAO;AAEvC,YAAM,QAAQ,IAAI;AAElB,YAAM,OAAO,OAAO,IAAI,OAAO,cAAc,QAAQ,IAAI,OAAO,cAAc,MAAM;AACpF,WAAK,eAAgB,MAAO,QAAQ,EAAG,GAAG,MAAO,QAAQ,EAAG,GAAG,MAAO,QAAQ,EAAG,CAAE;AAEnF,YAAM,OAAO,MAAM,gBAAiB,IAAK;AACzC,YAAM,eAAgB,OAAO,IAAK;AAElC,aAAO,KAAM,IAAK;AAAA,IAEnB;AAEA,QAAK,OAAO,GAAI;AAEf,aAAO,KAAM,IAAK;AAClB,cAAQ,IAAK,MAAM,MAAO;AAAA,IAE3B;AAAA,EAED;AAEA,QAAM,SAAS,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE;AAElC,WAAS,gBAAiB,MAAM,UAAU,QAAQ,GAAI;AAErD,QAAK,KAAK,iBAAkB;AAE3B,YAAM,SAAS,QAAQ,IAAK,IAAK;AACjC,YAAM,OAAO,OAAQ,KAAM;AAE3B,WAAK,UAAW,MAAO;AACvB,WAAK,UAAW,MAAO;AACvB,WAAK,eAAgB,QAAS;AAAA,IAE/B,WAAY,KAAK,QAAS;AAEzB,YAAM,OAAO,QAAQ,IAAK,IAAK;AAE/B,WAAK,UAAW,MAAO;AACvB,WAAK,UAAW,MAAO;AACvB,WAAK,eAAgB,QAAS;AAAA,IAE/B;AAAA,EAED;AAIA,MAAI,WAAW;AAEf,WAAS,OAAO;AAEf,UAAM,OAAO,YAAY,IAAI;AAE7B,QAAK,WAAW,GAAI;AAEnB,YAAM,SAAU,OAAO,YAAa;AAEpC,YAAM,WAAW;AACjB,YAAM,KAAK;AAIX,eAAU,IAAI,GAAG,IAAI,OAAO,QAAQ,IAAI,GAAG,KAAO;AAEjD,cAAM,OAAO,OAAQ,CAAE;AAEvB,YAAK,KAAK,iBAAkB;AAE3B,gBAAM,QAAQ,KAAK,eAAe;AAClC,gBAAM,SAAS,QAAQ,IAAK,IAAK;AAEjC,mBAAU,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAO;AAE1C,kBAAM,OAAO,OAAQ,CAAE;AAEvB,kBAAM,WAAW,KAAK,YAAY;AAClC,kBAAM,aAAa,KAAK,SAAS;AAEjC,oBAAS,UAAU,YAAY,OAAO,IAAI,EAAG;AAAA,UAE9C;AAEA,eAAK,eAAe,cAAc;AAClC,eAAK,sBAAsB;AAAA,QAE5B,WAAY,KAAK,QAAS;AAEzB,gBAAM,OAAO,QAAQ,IAAK,IAAK;AAE/B,eAAK,SAAS,KAAM,KAAK,YAAY,CAAE;AACvC,eAAK,WAAW,KAAM,KAAK,SAAS,CAAE;AAAA,QAEvC;AAAA,MAED;AAAA,IAED;AAEA,eAAW;AAAA,EAEZ;AAIA,cAAa,MAAM,MAAO,SAAU;AAEpC,SAAO;AAAA,IACN;AAAA,IACA;AAAA,EACD;AAED;AAEA,SAAS,QAAS,UAAU,YAAY,OAAO,OAAQ;AAEtD,QAAM,IAAI,WAAW,GAAG,IAAI,WAAW,GAAG,IAAI,WAAW,GAAG,IAAI,WAAW;AAC3E,QAAM,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG,KAAK,IAAI;AACvC,QAAM,KAAK,IAAI,IAAI,KAAK,IAAI,IAAI,KAAK,IAAI;AACzC,QAAM,KAAK,IAAI,IAAI,KAAK,IAAI,IAAI,KAAK,IAAI;AACzC,QAAM,KAAK,IAAI,IAAI,KAAK,IAAI,IAAI,KAAK,IAAI;AAEzC,QAAO,QAAQ,CAAE,IAAM,KAAM,KAAK;AAClC,QAAO,QAAQ,CAAE,IAAM,KAAK;AAC5B,QAAO,QAAQ,CAAE,IAAM,KAAK;AAC5B,QAAO,QAAQ,CAAE,IAAI;AAErB,QAAO,QAAQ,CAAE,IAAM,KAAK;AAC5B,QAAO,QAAQ,CAAE,IAAM,KAAM,KAAK;AAClC,QAAO,QAAQ,CAAE,IAAM,KAAK;AAC5B,QAAO,QAAQ,CAAE,IAAI;AAErB,QAAO,QAAQ,CAAE,IAAM,KAAK;AAC5B,QAAO,QAAQ,CAAE,IAAM,KAAK;AAC5B,QAAO,QAAQ,EAAG,IAAM,KAAM,KAAK;AACnC,QAAO,QAAQ,EAAG,IAAI;AAEtB,QAAO,QAAQ,EAAG,IAAI,SAAS;AAC/B,QAAO,QAAQ,EAAG,IAAI,SAAS;AAC/B,QAAO,QAAQ,EAAG,IAAI,SAAS;AAC/B,QAAO,QAAQ,EAAG,IAAI;AAEvB;",
  "names": []
}
